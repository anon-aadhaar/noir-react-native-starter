{"noir_version":"0.35.0+2a0d211b92d002fa75855d4ba27267f8892dd52c","hash":218875745207375360,"abi":{"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n","path":"std/hash/mod.nr"},"70":{"source":"use dep::std::hash::pedersen_hash;\n\nfn main(a: Field, b: Field) {\n    for i in 0..500 {\n        assert(\n            pedersen_hash([a + i as Field, b + i as Field])\n            == pedersen_hash([a + i as Field, b + i as Field])\n        );\n    }\n}\n","path":"/Users/madztheo/Documents/Wagmi/Studio/RnD/Docaproof/noir-libs/NoirReactNative/circuits/pedersen/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint"]}