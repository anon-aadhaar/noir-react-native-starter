import {NativeModules} from 'react-native';
import {Circuit} from '../types';
const {NoirModule} = NativeModules;

/**
 * Preload the circuit to be used in the proof generation and verification
 * @param circuit The JSON manifest file of the Noir circuit generated by nargo
 * @param runInBackground Whether to run the preloading in the background
 */
export async function preloadCircuit(
  circuit: Circuit,
  runInBackground: boolean = false,
) {
  await NoirModule.preloadCircuit(JSON.stringify(circuit), runInBackground);
}

function getLastIndexOfPublicInputs(circuit: Circuit) {
  let fieldCount = 0;
  for (let param of circuit.abi.parameters) {
    if (param.visibility === 'private') {
      continue;
    }
    const param_witness = circuit.abi.param_witnesses[param.name];
    for (let witness of param_witness) {
      fieldCount += witness.end - witness.start;
    }
  }
  // Each field is encoded as a hexadecimal string of 64 characters (i.e. 32 bytes)
  return fieldCount * 64;
}

/**
 * **WARNING: Not guaranteed to work with Honk proofs for now**
 *
 * Extract the public inputs from the proofs
 * @param circuit The circuit the proof is associated with
 * @param proofWithPublicInputs The proof containing the public inputs
 * @returns The raw public inputs
 */
export function extractRawPublicInputs(
  circuit: Circuit,
  proofWithPublicInputs: string,
) {
  const lastIndex = getLastIndexOfPublicInputs(circuit);
  return proofWithPublicInputs.slice(0, lastIndex);
}

/**
 * **WARNING: Not guaranteed to work with Honk proofs for now**
 *
 * Extract the proof from the proof including public inputs by getting
 * rid of the public inputs
 * @param circuit The circuit the proof is associated with
 * @param proofWithPublicInputs The proof containing the public inputs
 * @returns The proof
 */
export function extractProof(circuit: Circuit, proofWithPublicInputs: string) {
  const lastIndex = getLastIndexOfPublicInputs(circuit);
  return proofWithPublicInputs.slice(lastIndex);
}

/**
 * Generate a proof for the given inputs and circuit
 * @param inputs The inputs to the circuit
 * @param circuit If not preloaded, provide the JSON manifest file of the Noir circuit generated by nargo
 * @param proofType The proof system to use, either 'plonk' or 'honk'. If not provided, it defaults to 'plonk'.
 * If you want to have better performance and/or use a complex circuit use 'honk'.
 * If you want to have on-chain verification use 'plonk'.
 * @returns The proof and the verification key
 */
export async function generateProof(
  inputs: {[key: string]: any},
  circuit?: Circuit,
  proofType: 'plonk' | 'honk' = 'plonk',
) {
  const {proof, vkey} = await NoirModule.prove(
    inputs,
    // If the circuit is undefined, then it will use whichever circuit was loaded before
    // If no circuit was loaded before, then it will throw an error
    circuit ? JSON.stringify(circuit) : undefined,
    proofType,
  );

  return {
    // This is the full proof, including the public inputs
    proofWithPublicInputs: proof,
    // The result contains the public inputs concatenated to the proof
    // So we extract only the proof
    proof: circuit ? extractProof(circuit, proof) : undefined,
    vkey,
  };
}

/**
 * Verify a proof using the given verification key
 * @param proofWithPublicInputs The proof (including public inputs) to verify
 * @param vkey The verification key
 * @param circuit If not loaded before, either with the preloading function or the prove function,
 * then make sure to provide the JSON manifest file of the Noir circuit generated by nargo
 * @param proofType The proof system to use, either 'plonk' or 'honk'. If not provided, it defaults to 'plonk'.
 * If you want to have better performance and/or use a complex circuit use 'honk'.
 * If you want to have on-chain verification use 'plonk'.
 * @returns Whether the proof is valid
 */
export async function verifyProof(
  proofWithPublicInputs: string,
  vkey: string,
  circuit?: Circuit,
  proofType: 'plonk' | 'honk' = 'plonk',
) {
  const {verified} = await NoirModule.verify(
    proofWithPublicInputs,
    vkey,
    // If the circuit is undefined, then it will use whichever circuit was loaded before
    // If no circuit was loaded before, then it will throw an error
    circuit ? JSON.stringify(circuit) : undefined,
    proofType,
  );
  return verified;
}
