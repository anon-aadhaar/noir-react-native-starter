import {NativeModules} from 'react-native';
const {NoirModule} = NativeModules;

/**
 * Preload the circuit to be used in the proof generation and verification
 * @param circuit The JSON manifest file of the Noir circuit generated by nargo
 * @param runInBackground Whether to run the preloading in the background
 */
export async function preloadCircuit(
  circuit: any,
  runInBackground: boolean = false,
) {
  await NoirModule.preloadCircuit(JSON.stringify(circuit), runInBackground);
}

/**
 * Generate a proof for the given inputs and circuit
 * @param inputs The inputs to the circuit
 * @param circuit If not preloaded, provide the JSON manifest file of the Noir circuit generated by nargo
 * @returns The proof and the verification key
 */
export async function generateProof(
  inputs: {[key: string]: any},
  circuit?: any,
  proofType: 'plonk' | 'honk' = 'plonk',
) {
  const {proof, vkey} = await NoirModule.prove(
    inputs,
    // If the circuit is undefined, then it will use whichever circuit was loaded before
    // If no circuit was loaded before, then it will throw an error
    circuit ? JSON.stringify(circuit) : undefined,
    proofType,
  );
  return {
    // This is the full proof, including the inputs
    fullProof: proof,
    // The result contains the inputs concatenated to the proof
    // So we extract only the proof (the last 2144 bytes)
    // WARNING: will not work with honk as the proof is not
    // constant size
    // TODO: add a way to remove the public inputs from the proof for honk
    proof: proof.slice(-4288),
    vkey,
  };
}

/**
 * **WARNING: verification of honk proofs is not supported yet.
 * It will throw an error if you try to verify a honk proof**
 *
 * Verify a proof using the given verification key
 * @param proof The proof to verify
 * @param vkey The verification key
 * @param circuit If not loaded before, either with the preloading function or the prove function,
 * then make sure to provide the JSON manifest file of the Noir circuit generated by nargo
 * @returns Whether the proof is valid
 */
export async function verifyProof(
  proof: string,
  vkey: string,
  circuit?: any,
  proofType: 'plonk' | 'honk' = 'plonk',
) {
  const {verified} = await NoirModule.verify(
    proof,
    vkey,
    // If the circuit is undefined, then it will use whichever circuit was loaded before
    // If no circuit was loaded before, then it will throw an error
    circuit ? JSON.stringify(circuit) : undefined,
    proofType,
  );
  return verified;
}
